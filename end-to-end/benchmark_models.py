#!/usr/bin/env python
import argparse
import os
import sys
from pathlib import Path

from run_torch_model import get_all_models, run_model
from tqdm import tqdm


def run_model_zc_heuristic(source, model_name, batch_size, output_csv):
    os.environ["ZC_ENABLE"] = "TRUE"
    os.environ["ZC_TIME"] = "FALSE"
    os.environ["ZC_HEURISTIC"] = "TRUE"
    os.environ["ZC_WEIGHTS_LAYOUT"] = "HWIO"
    try:
        run_model(source, model_name, batch_size=batch_size, compile=False, convert_weights_to_hwio=True, csv_output=output_csv, method_name="ZeroCopy2d_Heuristic")
    except RuntimeError as e:
        with open(f"{output_csv}.err", "a") as f:
            f.write(f"Error running {model_name}, with ZeroCopy2d_Heuristic, {e}\n")


def run_model_torch(source, model_name, batch_size, output_csv):
    os.environ["ZC_ENABLE"] = "FALSE"
    os.environ["ZC_TIME"] = "FALSE"
    try:
        run_model(source, model_name, batch_size=batch_size, compile=False, convert_weights_to_hwio=False, csv_output=output_csv, method_name="Torch")
    except RuntimeError as e:
        with open(f"{output_csv}.err", "a") as f:
            f.write(f"Error running {model_name}, with Torch, {e}\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run all PyTorch models available in the chosen source."
    )

    parser.add_argument(
        "Source",
        type=str,
        choices=["timm", "torch"],
        default="torch",
        help="Source used to get models.",
    )

    parser.add_argument(
        "Output_CSV",
        help="Path to output CSV file",
    )

    parser.add_argument(
        "--list-models",
        action="store_true",
        help="List all available models.",
    )

    parser.add_argument(
        "--append-output",
        action="store_true",
        help="Allow output to be appended to existing file.",
    )

    parser.add_argument(
        "--batch-size",
        type=int,
        default=1,
        help="Size of batch.",
    )

    parser.add_argument(
        "--repeats",
        type=int,
        default=1,
        help="Number of repetitions for each run.",
    )

    parser.add_argument(
        "--filter-models",
        type=str,
        help="Path to a file where each line contains a model name (generated by filter_csv.py). Only models in that file will be run.",
    )

    args = parser.parse_args()
    source = args.Source
    output_csv = Path(args.Output_CSV)
    repeats = args.repeats
    filter_file = args.filter_models
    append_output = args.append_output

    if not append_output and output_csv.exists():
        print(f"Output CSV {output_csv} already exists.", file=sys.stderr)
        sys.exit(1)

    filter_models = None
    if filter_file:
        filter_file = Path(filter_file)
        if not filter_file.exists() or not filter_file.is_file():
            print(f"Filter file {filter_file} does not exist.", file=sys.stderr)
            sys.exit(1)
        with open(filter_file) as f:
            filter_models = set(f.read().splitlines())

    models = get_all_models(source, filter_models)
    if args.list_models:
        for model in models:
            print("- ", model)
        exit(0)

    methods = [run_model_zc_heuristic, run_model_torch]

    total_iterations = repeats * len(models) * len(methods)

    with tqdm(total=total_iterations) as pbar:
        for repeat in range(repeats):
            for model_name in models:
                for method in methods:
                    method(source, model_name, args.batch_size, output_csv)
                    pbar.update(1)
